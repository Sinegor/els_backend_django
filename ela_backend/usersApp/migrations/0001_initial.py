# Generated by Django 4.2.3 on 2023-08-10 11:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import usersApp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_confirm', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Все пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FieldsOfLaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.CharField(max_length=70, unique=True, verbose_name='сфера отношений')),
                ('type', models.CharField(max_length=25, verbose_name='область права')),
            ],
            options={
                'verbose_name': 'Отрасль',
                'verbose_name_plural': 'Отрасли права',
            },
        ),
        migrations.CreateModel(
            name='UsersKind',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Kind of user')),
            ],
            options={
                'verbose_name': 'Вид пользователя',
                'verbose_name_plural': 'Разновидности пользователей',
            },
        ),
        migrations.CreateModel(
            name='LawyerUserInterface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('phone', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{8,15}$')])),
                ('payment_method', models.CharField(blank=True, max_length=200)),
                ('current_applications', models.CharField(blank=True, max_length=200, verbose_name='Текущие заказы')),
                ('history_of_applications', models.CharField(blank=True, max_length=200, verbose_name='История заказов')),
                ('is_advokat', models.BooleanField(default=False)),
                ('legal_education_check', models.BooleanField(default=False)),
                ('preferred_location', models.CharField(max_length=150)),
                ('current_city', models.CharField(max_length=150)),
                ('incompetence', models.ManyToManyField(db_table='lawyersCompetence', to='usersApp.fieldsoflaw')),
                ('name_of_interface', models.ForeignKey(default=usersApp.models.LawyerUserInterface.get_default_type_user, on_delete=django.db.models.deletion.CASCADE, related_name='lawer_user_interface', to='usersApp.userskind', verbose_name='тип пользователя')),
                ('specialization', models.ManyToManyField(db_table='lawyersSpecialization', related_name='lawyer_specialization', to='usersApp.fieldsoflaw')),
                ('user_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lawer_user_interface', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь-юрист',
                'verbose_name_plural': 'Пользователи-юристы',
            },
        ),
        migrations.CreateModel(
            name='ClientUserInterface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=200)),
                ('phone', models.CharField(max_length=16, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{8,15}$')])),
                ('payment_method', models.CharField(blank=True, max_length=200)),
                ('current_requests', models.CharField(blank=True, max_length=200, verbose_name='Текущие запросы на помощь')),
                ('history_of_requests', models.CharField(blank=True, max_length=200, verbose_name='История запросов')),
                ('name_of_interface', models.ForeignKey(default=usersApp.models.ClientUserInterface.get_default_type_user, on_delete=django.db.models.deletion.CASCADE, related_name='client_user_interface', to='usersApp.userskind', verbose_name='тип пользователя')),
                ('user_name', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_user_interface', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь-клиент',
                'verbose_name_plural': 'Пользователи-клиенты',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='kind_of_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='usersApp.userskind', verbose_name='тип пользователя'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
